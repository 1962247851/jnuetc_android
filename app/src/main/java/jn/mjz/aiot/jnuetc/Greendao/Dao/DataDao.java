package jn.mjz.aiot.jnuetc.Greendao.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import jn.mjz.aiot.jnuetc.Greendao.Entity.Data;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA".
*/
public class DataDao extends AbstractDao<Data, Long> {

    public static final String TABLENAME = "DATA";

    /**
     * Properties of entity Data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Date = new Property(2, long.class, "date", false, "DATE");
        public final static Property State = new Property(3, short.class, "state", false, "STATE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property College = new Property(5, String.class, "college", false, "COLLEGE");
        public final static Property Grade = new Property(6, String.class, "grade", false, "GRADE");
        public final static Property Tel = new Property(7, String.class, "tel", false, "TEL");
        public final static Property Qq = new Property(8, String.class, "qq", false, "QQ");
        public final static Property Local = new Property(9, String.class, "local", false, "LOCAL");
        public final static Property District = new Property(10, short.class, "district", false, "DISTRICT");
        public final static Property Model = new Property(11, String.class, "model", false, "MODEL");
        public final static Property Message = new Property(12, String.class, "message", false, "MESSAGE");
        public final static Property Repairer = new Property(13, String.class, "repairer", false, "REPAIRER");
        public final static Property RepairDate = new Property(14, long.class, "repairDate", false, "REPAIR_DATE");
        public final static Property Mark = new Property(15, String.class, "mark", false, "MARK");
        public final static Property Service = new Property(16, String.class, "service", false, "SERVICE");
        public final static Property RepairMessage = new Property(17, String.class, "repairMessage", false, "REPAIR_MESSAGE");
    }


    public DataDao(DaoConfig config) {
        super(config);
    }
    
    public DataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UUID\" TEXT NOT NULL ," + // 1: uuid
                "\"DATE\" INTEGER NOT NULL ," + // 2: date
                "\"STATE\" INTEGER NOT NULL ," + // 3: state
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"COLLEGE\" TEXT NOT NULL ," + // 5: college
                "\"GRADE\" TEXT NOT NULL ," + // 6: grade
                "\"TEL\" TEXT," + // 7: tel
                "\"QQ\" TEXT," + // 8: qq
                "\"LOCAL\" TEXT NOT NULL ," + // 9: local
                "\"DISTRICT\" INTEGER NOT NULL ," + // 10: district
                "\"MODEL\" TEXT NOT NULL ," + // 11: model
                "\"MESSAGE\" TEXT NOT NULL ," + // 12: message
                "\"REPAIRER\" TEXT," + // 13: repairer
                "\"REPAIR_DATE\" INTEGER NOT NULL ," + // 14: repairDate
                "\"MARK\" TEXT," + // 15: mark
                "\"SERVICE\" TEXT," + // 16: service
                "\"REPAIR_MESSAGE\" TEXT);"); // 17: repairMessage
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DATA_UUID ON \"DATA\"" +
                " (\"UUID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Data entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUuid());
        stmt.bindLong(3, entity.getDate());
        stmt.bindLong(4, entity.getState());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getCollege());
        stmt.bindString(7, entity.getGrade());
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(8, tel);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
        stmt.bindString(10, entity.getLocal());
        stmt.bindLong(11, entity.getDistrict());
        stmt.bindString(12, entity.getModel());
        stmt.bindString(13, entity.getMessage());
 
        String repairer = entity.getRepairer();
        if (repairer != null) {
            stmt.bindString(14, repairer);
        }
        stmt.bindLong(15, entity.getRepairDate());
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(16, mark);
        }
 
        String service = entity.getService();
        if (service != null) {
            stmt.bindString(17, service);
        }
 
        String repairMessage = entity.getRepairMessage();
        if (repairMessage != null) {
            stmt.bindString(18, repairMessage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Data entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUuid());
        stmt.bindLong(3, entity.getDate());
        stmt.bindLong(4, entity.getState());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getCollege());
        stmt.bindString(7, entity.getGrade());
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(8, tel);
        }
 
        String qq = entity.getQq();
        if (qq != null) {
            stmt.bindString(9, qq);
        }
        stmt.bindString(10, entity.getLocal());
        stmt.bindLong(11, entity.getDistrict());
        stmt.bindString(12, entity.getModel());
        stmt.bindString(13, entity.getMessage());
 
        String repairer = entity.getRepairer();
        if (repairer != null) {
            stmt.bindString(14, repairer);
        }
        stmt.bindLong(15, entity.getRepairDate());
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(16, mark);
        }
 
        String service = entity.getService();
        if (service != null) {
            stmt.bindString(17, service);
        }
 
        String repairMessage = entity.getRepairMessage();
        if (repairMessage != null) {
            stmt.bindString(18, repairMessage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Data readEntity(Cursor cursor, int offset) {
        Data entity = new Data( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uuid
            cursor.getLong(offset + 2), // date
            cursor.getShort(offset + 3), // state
            cursor.getString(offset + 4), // name
            cursor.getString(offset + 5), // college
            cursor.getString(offset + 6), // grade
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // qq
            cursor.getString(offset + 9), // local
            cursor.getShort(offset + 10), // district
            cursor.getString(offset + 11), // model
            cursor.getString(offset + 12), // message
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // repairer
            cursor.getLong(offset + 14), // repairDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // service
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // repairMessage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Data entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.getString(offset + 1));
        entity.setDate(cursor.getLong(offset + 2));
        entity.setState(cursor.getShort(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setCollege(cursor.getString(offset + 5));
        entity.setGrade(cursor.getString(offset + 6));
        entity.setTel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQq(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLocal(cursor.getString(offset + 9));
        entity.setDistrict(cursor.getShort(offset + 10));
        entity.setModel(cursor.getString(offset + 11));
        entity.setMessage(cursor.getString(offset + 12));
        entity.setRepairer(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRepairDate(cursor.getLong(offset + 14));
        entity.setMark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setService(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRepairMessage(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Data entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Data entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Data entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
